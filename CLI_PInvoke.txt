using namespace System;
using namespace System::Runtime::InteropServices;

#define DEBUG_OUT Console::WriteLine

/////////////////////////////////////////////////////////////

ref struct MyPInvokeWrap {
public:
	enum class SystemMetricIndex {
		// Same values as those defined in winuser.h.
		SM_CXSCREEN = 0,
		SM_CYSCREEN = 1
	};
	
	[DllImport("user32")]
	static int GetSystemMetrics(int);

	[DllImport("NCMVDLL")]
	static void print_line(char *s);
};

////////////////////////////////////////////////////////////

[DllImport("NCMVDLL")]
extern "C" int ConvertStringToInt(const char *s);

//////////////////////////////////////////////////////

[StructLayout(LayoutKind::Sequential, Pack=8)]
value struct Position
{
	int x;
	int y;
};

[DllImport("NCMVDLL")]
extern "C" double CalDistance(Position a, Position b);

//////////////////////////////////////////////////////////////////

[DllImport("NCMVDLL")]
extern "C" void reverseArray([MarshalAs(UnmanagedType::LPArray)]array<int>^, int);

/////////////////////////////////////////////////////////////////

public delegate int __MCALLBACK(void);
[DllImport("NCMVDLL")]
extern "C" int testFuncPointer([MarshalAs(UnmanagedType::FunctionPtr)]__MCALLBACK ^);

int GetID()
{
	static int SN = 0;
	return SN++;
}

///////////////////////////////////////////////////////////////////

[StructLayout(LayoutKind::Sequential, Pack=8)]
value struct MStudent
{
	int ID;
	IntPtr scores;
};

[DllImport("NCMVDLL")]
extern "C" void showScores(MStudent);

////////////////////////////////////////////////////////////////////

#pragma unmanaged
[DllImport("msvcrt.dll", CallingConvention = CallingConvention::Cdecl)]
extern "C" int printf(const char *s, ...);
void NativePrintf(const char *s)
{
	printf("%s\n", s);
}
#pragma managed

void ManagedPrintf(String ^s)
{
	DEBUG_OUT(s);
}

///////////////////////////////////////////////////////////////////

[STAThread] int main()
{
	///////////////////////////////////////////////
#if (_MANAGED == 1) || (_M_CEE == 1)
	DEBUG_OUT("Compile with /CLR");
#else
	DEBUG_OUT("Compile without /CLR");
#endif

	/////////////////////////////////////////////////////////////
	DEBUG_OUT(MyPInvokeWrap::GetSystemMetrics((int)MyPInvokeWrap::SystemMetricIndex::SM_CXSCREEN));
	DEBUG_OUT(MyPInvokeWrap::GetSystemMetrics((int)MyPInvokeWrap::SystemMetricIndex::SM_CYSCREEN));
	
	///////////////////////////////////////////////
	char *s1 = "NCMV TEST";
	MyPInvokeWrap::print_line(s1);

	/////////////////////////////////////////////////
	String ^s2 = gcnew String("NCMV TEST 2");
	IntPtr ss2 = Marshal::StringToHGlobalAnsi(s2);
	NativePrintf((char *)ss2.ToPointer());
	Marshal::FreeHGlobal(ss2);

	//////////////////////////////////////////////////
	char *s3 = "NCMV TEST 3";
	String ^s3Test = Marshal::PtrToStringAnsi(static_cast<IntPtr>(s3));
	ManagedPrintf(s3Test);
	
	//////////////////////////////////////////
	int n = ConvertStringToInt("12345");
	DEBUG_OUT(n);
	
	///////////////////////////////////////////
	Position a, b;
	a.x = 0, a.y = 0;
	b.x = 1, b.y = 1;
	double d = CalDistance(a, b);
	DEBUG_OUT(d);

	////////////////////////////////////////////////
	array<int> ^arr = gcnew array<int>(10);
	for (int i = 0; i < 10; i++)
		arr[i] = i+1;
	reverseArray(arr, 10);
	for (int i = 0; i < 10; i++)
		Console::Write(arr[i] + " ");
	DEBUG_OUT();

	///////////////////////////////////////////////////////
	__MCALLBACK ^callback = gcnew __MCALLBACK(GetID);
	for (int i = 0; i < 10; i++)
		Console::Write(testFuncPointer(callback) + " ");
	DEBUG_OUT();

	//////////////////////////////////////////////////////////
	MStudent st;
	st.ID = testFuncPointer(callback);
	st.scores = Marshal::AllocCoTaskMem(10 * Marshal::SizeOf(float::typeid));
	for (int i = 0; i < 10; i++)
	{
		IntPtr ip = IntPtr(st.scores.ToInt32() + i * Marshal::SizeOf(float::typeid));
		Marshal::StructureToPtr((float)i * 3, ip, false);
	}
	showScores(st);
	Marshal::FreeCoTaskMem(st.scores);

	return 0;
}