create or replace PACKAGE HR_PACKAGE_1
AS
  
  cursor c_employees
    is
      select *
      from employees;
    
  function getHighestSalary
  return NUMBER;
  
  procedure drop_table
  (
    table_name varchar2
  );
  
  procedure send_bonus_dept
  (
    for_each_one NUMBER,
    dept_id NUMBER
  );
  
  procedure send_bonus_emp
  (
    for_each_one NUMBER,
    emp_id NUMBER
  );
  
  TYPE EMP_ID_ARRAY_T is table of NUMBER index by BINARY_INTEGER;
  procedure send_bonus_emps
  (
    for_each_one IN NUMBER,
    emp_ids IN EMP_ID_ARRAY_T
  );
  
  procedure send_bonus_ref
  (
    for_each_one IN NUMBER,
    emp_cursor IN SYS_REFCURSOR
  );

END HR_PACKAGE_1;

//////////////////////////////////////////////////////////////////////////

create or replace PACKAGE body HR_PACKAGE_1
AS

  function getHighestSalary
  return NUMBER
  as
    n_highest NUMBER;
  begin
    select max(salary) into n_highest
    from employees;
    return n_highest;
  end getHighestSalary;
  
  procedure drop_table
  (
    table_name varchar2
  )
  as
  begin
    Execute Immediate 'drop table ' || table_name;
    Exception
      when others then
        if sqlcode != -942 then
          raise;
        end if;
  end drop_table;
  
  procedure send_bonus_dept
  (
    for_each_one NUMBER,
    dept_id NUMBER
  )
  as
  begin
    merge into BONUS x
    using 
      (
        select employee_id, (select for_each_one from DUAL) as money
        from employees
        where department_id = dept_id
      ) y
    on (x.employee_id = y.employee_id)
    when matched then
      update set x.money = x.money + for_each_one
    when not matched then
      insert (x.employee_id, x.money)
      values (y.employee_id, y.money);
  end send_bonus_dept;
  
  procedure send_bonus_emp
  (
    for_each_one NUMBER,
    emp_id NUMBER
  )
  as
  begin
    merge into BONUS b
    using (
              select employee_id, (select for_each_one from DUAL) as money
              from employees
              where employee_id = emp_id
          ) e
    on (b.employee_id = e.employee_id)
    when matched then
      update set b.money = b.money + e.money
    when not matched then
      insert (b.employee_id, b.money)
      values (e.employee_id, e.money);
  end send_bonus_emp;
  
  procedure send_bonus_emps
  (
    for_each_one IN NUMBER,
    emp_ids IN EMP_ID_ARRAY_T
  )
  as
  begin
    for i in 1..emp_ids.count
    loop
      Send_Bonus_Emp(for_each_one, emp_ids(i));
    end loop;
  end send_bonus_emps;
  
  procedure send_bonus_ref
  (
    for_each_one IN NUMBER,
    emp_cursor IN SYS_REFCURSOR
  )
  as
    emp_row EMP_ID_ARRAY_T;
  begin
      fetch emp_cursor bulk collect into emp_row;
      Send_Bonus_Emps(for_each_one, emp_row);
  end send_bonus_ref;

END HR_PACKAGE_1;

/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <windows.h>

using namespace std;
using namespace System;
using namespace System::IO;
using namespace System::Data;
using namespace System::Data::Common;
using namespace System::Collections;
using namespace System::Runtime::InteropServices;
using namespace System::Windows::Forms;
using namespace Oracle::DataAccess::Client;
using namespace Oracle::DataAccess::Types;

#define DEBUG Console::WriteLine

void testRefCursor(OracleConnection ^%con)
{
	std::string cmdStrOpenRef = "begin \
										open :1 for select employee_id from employees; \
								 end;";
	std::string cmdStrSendBonus = "begin \
										HR_PACKAGE_1.SEND_BONUS_REF(:1, :2); \
								   end;";
	try
	{
		if (con->State != ConnectionState::Open)
			con->Open();

		OracleCommand ^cmdOpenRef = gcnew OracleCommand(gcnew String(cmdStrOpenRef.c_str()), con);
		OracleParameter ^outOpenRef = cmdOpenRef->Parameters->Add(":1", OracleDbType::RefCursor, DBNull::Value, ParameterDirection::Output);
		cmdOpenRef->ExecuteNonQuery();

		OracleCommand ^cmdSendBonus = gcnew OracleCommand(gcnew String(cmdStrSendBonus.c_str()), con);
		cmdSendBonus->Parameters->Add(":1", OracleDbType::Int32, 111, ParameterDirection::Input);
		cmdSendBonus->Parameters->Add(":2", OracleDbType::RefCursor, outOpenRef->Value, ParameterDirection::Input);
		cmdSendBonus->ExecuteNonQuery();
	}
	catch (Exception ^e)
	{
		MessageBox::Show(e->Message->ToString());
	}
	finally
	{
		if (con->State != ConnectionState::Closed)
			con->Close();
	}
}

int main()
{
	std::string conString = "User Id=HR; password=HR;Data Source=localhost:1521/SAMPLEDB; Pooling=true;";
	
	OracleConnection ^con = gcnew OracleConnection(gcnew String(conString.c_str()));
	try
	{
		testRefCursor(con);
	}
	catch (OracleException ^e)
	{
		MessageBox::Show(e->Message->ToString());
	}
	finally
	{
		if (con->State != ConnectionState::Closed)
			con->Close();
	}
	
	return 0;
}