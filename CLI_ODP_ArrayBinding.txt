#include <string>
#include <windows.h>

using namespace std;
using namespace System;
using namespace System::IO;
using namespace System::Data;
using namespace System::Data::Common;
using namespace System::Collections;
using namespace System::Runtime::InteropServices;
using namespace System::Windows::Forms;
using namespace Oracle::DataAccess::Client;
using namespace Oracle::DataAccess::Types;

#define DEBUG Console::WriteLine
#define PERFORMANCE_TEST(FuncCall) { DEBUG(#FuncCall); \
									DateTime _start, _end; \
									double _seconds; \
									_start = DateTime::Now; \
									FuncCall; \
									_end = DateTime::Now; \
									_seconds = _end.Subtract(_start).TotalSeconds; \
									DEBUG(_seconds); }

void DisplayDataSet(DataSet ^%ds)
{
	for (int ids = 0; ids < ds->Tables->Count; ids++)
	{
		DataTable ^tb = ds->Tables[ids];

		for (int irow = 0; irow < tb->Rows->Count; irow++)
		{
			Console::Write(irow + ": ");
			DataRow ^row = tb->Rows[irow];
			for (int icol = 0; icol < tb->Columns->Count; icol++)
			{
				Console::Write(row[icol]);
				if (icol < tb->Columns->Count - 1)
					Console::Write(", ");
			}
			DEBUG();
		}
		DEBUG();
	}
}

void DisplayDataInReader(OracleDataReader ^reader)
{
	int row = 0;
	while (reader->Read())
	{
		Console::Write(row++ + ": ");
		for (int i = 0; i < reader->FieldCount; i++)
		{
			Console::Write(reader->GetOracleValue(i)->ToString());
			if (i < reader->FieldCount - 1)
				Console::Write(", ");
		}
		DEBUG();
	}
	DEBUG();
}

void TestPassSingleParam(OracleConnection ^% con)
{
	try
	{
		if (con->State != ConnectionState::Open)
			con->Open();
		
		for (int i = 100; i < 200; i++)
		{
			OracleCommand ^cmd = gcnew OracleCommand("begin HR_PACKAGE_1.send_bonus_emp(:for_each_one, :emp_id); end;", con);
			
			OracleParameter ^for_each_one = cmd->Parameters->Add("@for_each_one", OracleDbType::Int32, ParameterDirection::Input);
			for_each_one->Value = 100;
			for_each_one->CollectionType = OracleCollectionType::None;

			OracleParameter ^emp_id = cmd->Parameters->Add("@emp_id", OracleDbType::Int32, ParameterDirection::Input);
			emp_id->Value = i;
			emp_id->CollectionType = OracleCollectionType::None;

			cmd->ExecuteNonQuery();
		}
	}
	catch (Exception ^e)
	{
		MessageBox::Show(e->Message->ToString());
	}
	finally
	{
		if (con->State != ConnectionState::Closed)
			con->Close();
	}
}

void TestPassArrayParam(OracleConnection ^%con)
{
	try
	{
		if (con->State != ConnectionState::Open)
			con->Open();
		
		OracleCommand ^cmd = gcnew OracleCommand("begin HR_PACKAGE_1.send_bonus_emps(:for_each_one, :emp_ids); end;", con);

		OracleParameter ^for_each_one = cmd->Parameters->Add("@for_each_one", OracleDbType::Int32, ParameterDirection::Input);
		for_each_one->Value = 100;
		for_each_one->CollectionType = OracleCollectionType::None;

		array<int> ^ids = gcnew array<int>(100);
		for (int i = 0; i < 100; i++)
			ids[i] = 100 + i;
		OracleParameter ^emp_ids = cmd->Parameters->Add("@emp_ids", OracleDbType::Int32, ParameterDirection::Input);
		emp_ids->Value = ids;
		emp_ids->Size = 100;
		emp_ids->CollectionType = OracleCollectionType::PLSQLAssociativeArray;
		emp_ids->ArrayBindSize = ids;

		cmd->ExecuteNonQuery();
	}
	catch (Exception ^e)
	{
		MessageBox::Show(e->Message->ToString());
	}
	finally
	{
		if (con->State != ConnectionState::Closed)
			con->Close();
	}
}

int main()
{
	std::string conString = "User Id=HR; password=HR;Data Source=localhost:1521/SAMPLEDB; Pooling=true;";
	OracleConnection ^con = gcnew OracleConnection(gcnew String(conString.c_str()));

	try
	{
		PERFORMANCE_TEST(TestPassSingleParam(con));
		PERFORMANCE_TEST(TestPassArrayParam(con));
	}
	catch (OracleException ^e)
	{
		MessageBox::Show(e->Message->ToString());
	}
	finally
	{
		if (con->State != ConnectionState::Closed)
			con->Close();
	}
	
	return 0;
}