#include <stdio.h>
#include <iostream>
#include <comdef.h>
#include <gcroot.h>

using namespace System;
using namespace System::Collections;
using namespace System::Collections::Generic;
using namespace System::IO;
using namespace System::Threading;
using namespace System::Windows;
using namespace System::Windows::Forms;
using namespace System::Runtime;
using namespace System::Runtime::InteropServices;
using namespace System::Data;
using namespace Microsoft;
using namespace Microsoft::Win32;

#define DEBUG_OUT Console::WriteLine

#define MAXCOLS 100

class DatabaseNative
{
public:
	DatabaseNative() : table(nullptr) { }

	void CreateAndPopulateTable()
	{
		// Create a simple DataTable.
		table = gcnew DataTable("SampleTable");

		// Add a column of type String to the table.
		DataColumn ^column1 = gcnew DataColumn("StringCol", Type::GetType("System.String"));
		table->Columns->Add(column1);
	}

	void AddRow(char *stringColValue)
	{
		// Add a row to the table.
		DataRow ^row = table->NewRow();
		row["StringCol"] = Marshal::PtrToStringAnsi((IntPtr)stringColValue);
		table->Rows->Add(row);
	}

	void AddRow(BSTR stringColValue)
	{
		// Add a row to the table.
		DataRow ^row = table->NewRow();
		row["StringCol"] = Marshal::PtrToStringBSTR((IntPtr)stringColValue);
		table->Rows->Add(row);
	}

	int GetValuesForColumn(char *dataColumn, char **values, int valuesLength)
	{
		// Marshal the name of the column to a managed
		// String.
		String ^columnStr = Marshal::PtrToStringAnsi((IntPtr)dataColumn);

		// Get all rows in the table.
		array<DataRow ^> ^rows = table->Select();
		int len = rows->Length;
		len = (len > valuesLength) ? valuesLength : len;
		for (int i = 0; i < len; i++)
		{
			// Marshal each column value from a managed string
			// to a char *.
			values[i] = (char *)Marshal::StringToHGlobalAnsi((String ^)rows[i][columnStr]).ToPointer();
		}

		return len;
	}

	int GetValuesForColumn(BSTR dataColumn, BSTR *values,
        int valuesLength)
    {
		// Marshal the name of the column to a managed
		// String.
		String ^columnStr = Marshal::PtrToStringBSTR((IntPtr)dataColumn);

		// Get all rows in the table.
		array<DataRow ^> ^rows = table->Select();
		int len = rows->Length;
		len = (len > valuesLength) ? valuesLength : len;
		for (int i = 0; i < len; i++)
		{
			// Marshal each column value from a managed string
			// to a BSTR.
			values[i] = (BSTR)Marshal::StringToBSTR((String ^)rows[i][columnStr]).ToPointer();
		}

		return len;
	}

private:
	// Using gcroot, you can use a managed type in
	// a native class.
	gcroot<DataTable ^> table;
};

public ref class DatabaseRef
{
public:
	DatabaseRef() : table(nullptr) {}
	
	void CreateAndPopulateTable()
	{
		// Create a simple DataTable.
		table = gcnew DataTable("SampleTable");

		// Add a column of type String to the table.
		DataColumn ^column1 = gcnew DataColumn("StringCol", Type::GetType("System.String"));
		table->Columns->Add(column1);
	}

	void AddRow(String ^stringColValue)
	{
		// Add a row to the table.
		DataRow ^row = table->NewRow();
		row["StringCol"] = stringColValue;
		table->Rows->Add(row);
	}

	int GetValuesForColumn(String ^dataColumn, array<String^> ^values, int valuesLength)
	{
		// Marshal the name of the column to a managed
		// String.
		String ^columnStr = dataColumn;

		// Get all rows in the table.
		array<DataRow ^> ^rows = table->Select();
		int len = rows->Length;
		len = (len > valuesLength) ? valuesLength : len;
		for (int i = 0; i < len; i++)
		{
			// Marshal each column value from a managed string
			// to a char *.
			values[i] = (String^)rows[i][columnStr];
		}

		return len;
	}

private:
	DataTable ^table;
};

[STAThread] int main()
{
	{
		// Create a table and add a few rows to it.
		DatabaseNative *db = new DatabaseNative();
		db->CreateAndPopulateTable();
		db->AddRow("This is string 1.");
		db->AddRow("This is string 2.");

		// Now retrieve the rows and display their contents.
		char *values[MAXCOLS];
		int len = db->GetValuesForColumn("StringCol", values, MAXCOLS);
		for (int i = 0; i < len; i++)
		{
			std::cout << "StringCol: " << values[i] << std::endl;

			// Deallocate the memory allocated using
			// Marshal::StringToHGlobalAnsi.
			GlobalFree(values[i]);
		}
		
		delete db;
	}

	{
		DatabaseRef ^db = gcnew DatabaseRef();
		db->CreateAndPopulateTable();
		db->AddRow("This is string 1.");
		db->AddRow("This is string 2.");

		// Now retrieve the rows and display their contents.
		array<String^> ^values = gcnew array<String^>(MAXCOLS);
		int len = db->GetValuesForColumn("StringCol", values, MAXCOLS);
		for (int i = 0; i < len; i++)
		{
			DEBUG_OUT("StringCol: " + values[i]);
		}
	}

	return 0;
}